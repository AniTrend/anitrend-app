apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.objectbox'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.compileSdk
    defaultConfig {
        applicationId "com.mxt.anitrend"
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.targetSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "anitrend_v${defaultConfig.versionName}_rc_${defaultConfig.versionCode}.apk"
                }
            }
        }
        buildTypes.each {
            if (rootProject.file("secrets.properties").exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file("secrets.properties")))
                it.buildConfigField "String", "API_KEY", props['API_KEY']
                it.buildConfigField "String", "CLIENT_ID", props['CLIENT_ID']
                it.buildConfigField "String", "CLIENT_SECRET", props['CLIENT_SECRET']
                it.buildConfigField "String", "GIPHY_KEY", props['GIPHY_KEY']
            } else {
                it.buildConfigField "String", "API_KEY", "API_KEY"
                it.buildConfigField "String", "CLIENT_ID", "CLIENT_ID"
                it.buildConfigField "String", "CLIENT_SECRET", "CLIENT_SECRET"
                it.buildConfigField "String", "GIPHY_KEY", "GIPHY_KEY"
            }

            it.buildConfigField "String", "HEADER_KEY", HEADER_KEY
            it.buildConfigField "String", "REDIRECT_URI", REDIRECT_URI
            it.buildConfigField "String", "RESPONSE_TYPE", RESPONSE_TYPE

            it.buildConfigField "String", "REGISTER_URL", REGISTER_URL
            it.buildConfigField "String", "API_AUTH_LINK", API_AUTH_LINK
            it.buildConfigField "String", "API_LINK", API_LINK

            it.buildConfigField "String", "CRUNCHY_LINK", CRUNCHY_LINK
            it.buildConfigField "String", "FEEDS_LINK", FEEDS_LINK

            it.buildConfigField "String", "APP_REPO", APP_REPO

            it.buildConfigField "String", "GIPHY_LINK", GIPHY_LINK
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        jumboMode true
    }
}

configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /** Testing Libraries */
    testImplementation 'junit:junit:4.12'
    testImplementation "org.hamcrest:hamcrest-library:${rootProject.hemcrest}"
    testImplementation "org.mockito:mockito-core:${rootProject.mockito}"
    androidTestImplementation "org.mockito:mockito-android:${rootProject.mockito}"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    /** Architecture Components */
    implementation "android.arch.lifecycle:extensions:${rootProject.architecture}"
    implementation "android.arch.work:work-runtime-ktx:${rootProject.workManager}"

    /** Android Support Libraries */
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibrary}"
    implementation "com.android.support:design:${rootProject.supportLibrary}"
    implementation "com.android.support:cardview-v7:${rootProject.supportLibrary}"
    implementation "com.android.support:support-vector-drawable:${rootProject.supportLibrary}"

    /** Fire-base Libraries */
    implementation "com.google.firebase:firebase-core:${rootProject.firebase}"

    /** Crash Analytics */
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }

    /** Retrofit Libraries */
    implementation "com.squareup.retrofit2:retrofit:${rootProject.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.retrofit}"
    implementation("com.squareup.retrofit2:converter-simplexml:${rootProject.retrofit}") {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.1'

    /** Glide Libraries */
    implementation "com.github.bumptech.glide:glide:${rootProject.glide}"
    kapt "com.github.bumptech.glide:compiler:${rootProject.glide}"

    /** Butter Knife Libraries */
    implementation "com.jakewharton:butterknife:${rootProject.butterKnife}"
    kapt "com.jakewharton:butterknife-compiler:${rootProject.butterKnife}"

    /** State Layout Library */
    implementation 'com.github.nguyenhoanglam:ProgressLayout:1.0.1'

    /** Event Bus Library */
    implementation 'org.greenrobot:eventbus:3.1.1'

    /** Material Dialogs Library*/
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    /** Object Box */
    implementation "io.objectbox:objectbox-android:${rootProject.objectBox}"
    kapt "io.objectbox:objectbox-processor:${rootProject.objectBox}"

    /** Pretty Time */
    implementation 'org.ocpsoft.prettytime:prettytime:4.0.2.Final'

    /** Smart Tab Layout */
    implementation 'com.ogaclejapan.smarttablayout:library:1.7.0'

    /** Java Streams Port */
    implementation 'com.annimon:stream:1.2.1'

    /** Highly Customizable Video Player */
    implementation 'cn.jzvd:jiaozivideoplayer:7.0_preview'

    /** Photo View */
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'

    /** Alerter */
    implementation 'com.tapadoo.android:alerter:2.0.4'

    /** Rich Text Markdown Parser */
    implementation "ru.noties.markwon:core:$rootProject.markwon"
    implementation "ru.noties.markwon:html:$rootProject.markwon"
    implementation "ru.noties.markwon:image-okhttp:$rootProject.markwon"

    /** Tap Target Prompt */
    implementation 'uk.co.samuelwall:material-tap-target-prompt:2.14.0'

    /** Circular Progress View */
    implementation 'com.github.rahatarmanahmed:circularprogressview:2.5.0'

    /** On-boarding Experience */
    implementation 'com.codemybrainsout.onboarding:onboarder:1.0.4'

    /** Charts */
    implementation'com.github.PhilJay:MPAndroidChart:v3.0.3'

    /** About Library */
    implementation 'com.github.medyo:android-about-page:1.2.5'

    /** Multi Dex */
    implementation 'com.android.support:multidex:1.0.3'

    /** Material Search View */
    implementation 'com.miguelcatalan:materialsearchview:1.4.0'

    implementation "com.github.wax911:android-emojify:$rootProject.emojify"
}

apply plugin: 'com.google.gms.google-services'
