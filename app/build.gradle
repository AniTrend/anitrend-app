import com.mxt.anitrend.buildSrc.Libraries
import com.mxt.anitrend.buildsrc.common.Versions

plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlinx-serialization")
    id("kotlin-android-extensions")
    id("kotlin-kapt")
    id("io.objectbox")
}

def flavor = ''

android {
    compileSdkVersion Versions.compileSdk
    defaultConfig {
        applicationId "com.mxt.anitrend"
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def code = defaultConfig.versionCode
                    def name = defaultConfig.versionName
                    def flavour_name = output.name
                    outputFileName = "anitrend_v${name}-${code}_${flavour_name}.apk"
                }
            }
        }
        buildTypes.each {
            if (rootProject.file("secrets.properties").exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file("secrets.properties")))
                it.buildConfigField "String", "CLIENT_ID", props['CLIENT_ID']
                it.buildConfigField "String", "CLIENT_SECRET", props['CLIENT_SECRET']
                it.buildConfigField "String", "GIPHY_KEY", props['GIPHY_KEY']
            } else {
                it.buildConfigField "String", "CLIENT_ID", "CLIENT_ID"
                it.buildConfigField "String", "CLIENT_SECRET", "CLIENT_SECRET"
                it.buildConfigField "String", "GIPHY_KEY", "GIPHY_KEY"
            }

            it.buildConfigField "String", "HEADER_KEY", HEADER_KEY
            it.buildConfigField "String", "REDIRECT_URI", REDIRECT_URI
            it.buildConfigField "String", "RESPONSE_TYPE", RESPONSE_TYPE

            it.buildConfigField "String", "REGISTER_URL", REGISTER_URL
            it.buildConfigField "String", "API_AUTH_LINK", API_AUTH_LINK
            it.buildConfigField "String", "API_LINK", API_LINK

            it.buildConfigField "String", "CRUNCHY_LINK", CRUNCHY_LINK
            it.buildConfigField "String", "FEEDS_LINK", FEEDS_LINK

            it.buildConfigField "String", "APP_REPO", APP_REPO

            it.buildConfigField "String", "GIPHY_LINK", GIPHY_LINK
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = [
            "-Xopt-in=org.koin.core.component.KoinExperimentalAPI",
            "-Xopt-in=org.koin.core.component.KoinApiExtension",
            "-Xopt-in=org.koin.core.KoinExperimentalAPI",
            "-Xuse-experimental=kotlin.Experimental",
            "-Xopt-in=kotlin.ExperimentalStdlibApi",
            "-Xopt-in=kotlin.Experimental",
            "-Xopt-in=kotlin.RequiresOptIn"
        ]
    }
    dataBinding {
        enabled = true
    }
    dexOptions {
        jumboMode true
    }

    flavorDimensions "version"

    productFlavors {
        app {
            flavor = 'app'
            dimension "version"
            resValue "string", "flavor_description", "Playstore"
        }
        github {
            flavor = 'github'
            dimension = 'version'
            versionNameSuffix = '-github'
            resValue "string", "flavor_description", "Github"
        }
    }
}

configurations.all {
    exclude group: 'org.jetbrains', module: 'annotations-java5'
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation(Libraries.JetBrains.Kotlin.stdlib)
    implementation(Libraries.JetBrains.KotlinX.Serialization.json)
    implementation(Libraries.JetBrains.KotlinX.Coroutines.android)
    implementation(Libraries.JetBrains.KotlinX.Coroutines.core)
    testImplementation(Libraries.JetBrains.KotlinX.Coroutines.test)

    /** Material Design */
    implementation(Libraries.Google.Material.material)
    implementation(Libraries.Google.FlexBox.flexBox)
    implementation(Libraries.Google.Firebase.Analytics.analyticsKtx)
    implementation(Libraries.Google.Firebase.Crashlytics.crashlytics)

    /** Architecture Components */
    implementation(Libraries.AndroidX.ConstraintLayout.constraintLayout)
    implementation(Libraries.AndroidX.Collection.collectionKtx)

    implementation(Libraries.AndroidX.Core.coreKtx)
    implementation(Libraries.AndroidX.Activity.activityKtx)
    implementation(Libraries.AndroidX.Fragment.fragmentKtx)
    implementation(Libraries.AndroidX.Preference.preferenceKtx)

    implementation(Libraries.AndroidX.Work.runtimeKtx)
    implementation(Libraries.AndroidX.Work.multiProcess)
    implementation(Libraries.AndroidX.StartUp.startUpRuntime)

    implementation(Libraries.AndroidX.Lifecycle.liveDataCoreKtx)
    implementation(Libraries.AndroidX.Lifecycle.runTimeKtx)
    implementation(Libraries.AndroidX.Lifecycle.liveDataKtx)
    implementation(Libraries.AndroidX.Lifecycle.extensions)

    /** Koin AndroidX Dependency Injection */
    implementation (Libraries.Koin.core)
    implementation (Libraries.Koin.extension)
    implementation (Libraries.Koin.AndroidX.scope)
    implementation (Libraries.Koin.AndroidX.viewModel)
    implementation (Libraries.Koin.AndroidX.workManager)
    androidTestImplementation(Libraries.Koin.test)

    /** Glide Libraries */
    implementation(Libraries.Glide.glide)
    kapt(Libraries.Glide.compiler)

    /** Retrofit Libraries */
    implementation(Libraries.Square.OkHttp.logging)
    implementation(Libraries.Square.Retrofit.retrofit)
    implementation(Libraries.Square.Retrofit.gsonConverter)
    implementation(Libraries.Square.Retrofit.xmlConverter) {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }

    /** Butter Knife Libraries */
    implementation "com.jakewharton:butterknife:${Versions.butterKnife}"
    kapt "com.jakewharton:butterknife-compiler:${Versions.butterKnife}"

    /** Rich Text Markdown Parser */
    implementation(Libraries.Markwon.core)
    implementation(Libraries.Markwon.editor)
    implementation(Libraries.Markwon.html)
    implementation(Libraries.Markwon.image)
    implementation(Libraries.Markwon.glide)
    implementation(Libraries.Markwon.parser)
    implementation(Libraries.Markwon.linkify)
    implementation(Libraries.Markwon.simpleExt)
    implementation(Libraries.Markwon.syntaxHighlight)
    implementation(Libraries.Markwon.Extension.taskList)
    implementation(Libraries.Markwon.Extension.strikeThrough)
    implementation(Libraries.Markwon.Extension.tables)
    implementation(Libraries.Markwon.Extension.latex)
    implementation(Libraries.betterLinkMovement)

    /** Object Box */
    implementation(Libraries.ObjectBox.android)
    kapt(Libraries.ObjectBox.processor)

    /** Logging */
    implementation(Libraries.timber)
    implementation(Libraries.treessence)

    /** AniTrend */
    implementation(Libraries.AniTrend.Emojify.emojify)
    implementation(Libraries.AniTrend.Markdown.markdown)
    implementation(Libraries.AniTrend.Retrofit.graphQL)

    /** Smart Tab Layout */
    implementation(Libraries.SmartTab.layout)
    implementation(Libraries.SmartTab.utilities)

    /** Material Dialogs */
    implementation("com.afollestad.material-dialogs:core:${Versions.materialDialogs}")

    /** Tap Target Prompt */
    implementation("uk.co.samuelwall:material-tap-target-prompt:${Versions.tapTarget}")

    /** Pretty Time */
    implementation("org.ocpsoft.prettytime:prettytime:${Versions.prettyTime}")

    /** Highly Customizable Video Player */
    implementation("cn.jzvd:jiaozivideoplayer:${Versions.jiaoziVideoPlayer}")

    /** Photo View */
    implementation("com.github.chrisbanes:PhotoView:${Versions.photoView}")

    /** On-boarding Experience */
    implementation("com.codemybrainsout.onboarding:onboarder:${Versions.onboarder}")

    /** Charts */
    implementation("com.github.PhilJay:MPAndroidChart:v${Versions.mpAndroidChart}")

    /** About Library */
    implementation("com.github.medyo:android-about-page:${Versions.aboutPage}")

    /** Multi Dex */
    implementation("androidx.multidex:multidex:${Versions.multidex}")

    /** Material Search View */
    implementation("com.github.ma-myair:MaterialSearchView:${Versions.materialSearchView}")

    /** State Layout Library */
    implementation("com.github.nguyenhoanglam:ProgressLayout:${Versions.progressLayout}")

    /** Event Bus Library */
    implementation("org.greenrobot:eventbus:${Versions.eventBus}")

    /** Alerter */
    implementation("com.tapadoo.android:alerter:${Versions.alerter}")

    /** Stream */
    implementation("com.annimon:stream:${Versions.stream}")

    /** Circular Progress View */
    implementation("com.github.rahatarmanahmed:circularprogressview:${Versions.circularProgressView}")

    /** Testing-only dependencies */
    testImplementation(Libraries.junit)
    testImplementation(Libraries.Mockito.core)

    androidTestImplementation(Libraries.CashApp.Turbine.turbine)
    androidTestImplementation(Libraries.AndroidX.Test.coreKtx)
    androidTestImplementation(Libraries.AndroidX.Test.rules)
    androidTestImplementation(Libraries.AndroidX.Test.runner)
    androidTestImplementation(Libraries.AndroidX.Test.Espresso.core)
    androidTestImplementation(Libraries.AndroidX.Test.Extension.junitKtx)
    androidTestImplementation(Libraries.Mockito.android)
    androidTestImplementation(Libraries.mockk)
}

if (flavor == 'app' && file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}
