plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-android-extensions")
    id("kotlin-kapt")
    id("io.objectbox")
}

def flavor = ''

android {
    compileSdkVersion compileSdk
    defaultConfig {
        applicationId "com.mxt.anitrend"
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def code = defaultConfig.versionCode
                    def name = defaultConfig.versionName
                    def flavour_name = output.name
                    outputFileName = "anitrend_v${name}_rc_${code}_${flavour_name}.apk"
                }
            }
        }
        buildTypes.each {
            if (rootProject.file("secrets.properties").exists()) {
                def props = new Properties()
                props.load(new FileInputStream(rootProject.file("secrets.properties")))
                it.buildConfigField "String", "CLIENT_ID", props['CLIENT_ID']
                it.buildConfigField "String", "CLIENT_SECRET", props['CLIENT_SECRET']
                it.buildConfigField "String", "GIPHY_KEY", props['GIPHY_KEY']
            } else {
                it.buildConfigField "String", "CLIENT_ID", "CLIENT_ID"
                it.buildConfigField "String", "CLIENT_SECRET", "CLIENT_SECRET"
                it.buildConfigField "String", "GIPHY_KEY", "GIPHY_KEY"
            }

            it.buildConfigField "String", "HEADER_KEY", HEADER_KEY
            it.buildConfigField "String", "REDIRECT_URI", REDIRECT_URI
            it.buildConfigField "String", "RESPONSE_TYPE", RESPONSE_TYPE

            it.buildConfigField "String", "REGISTER_URL", REGISTER_URL
            it.buildConfigField "String", "API_AUTH_LINK", API_AUTH_LINK
            it.buildConfigField "String", "API_LINK", API_LINK

            it.buildConfigField "String", "CRUNCHY_LINK", CRUNCHY_LINK
            it.buildConfigField "String", "FEEDS_LINK", FEEDS_LINK

            it.buildConfigField "String", "APP_REPO", APP_REPO

            it.buildConfigField "String", "GIPHY_LINK", GIPHY_LINK
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dataBinding {
        enabled = true
    }
    dexOptions {
        jumboMode true
    }

    flavorDimensions "version"

    productFlavors {
        app {
            flavor = 'app'
            dimension "version"
            resValue "string", "flavor_description", "Playstore"
        }
        github {
            flavor = 'github'
            dimension = 'version'
            versionNameSuffix = '-github'
            resValue "string", "flavor_description", "Github"
        }
    }
}

configurations.all {
    exclude group: 'org.jetbrains', module: 'annotations-java5'
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":markdown")

    /** Koin AndroidX Dependency Injection */
    implementation "org.koin:koin-core:$koin"
    implementation "org.koin:koin-core-ext:$koin"
    implementation "org.koin:koin-androidx-scope:$koin"
    implementation "org.koin:koin-androidx-viewmodel:$koin"

    /** Kotlin Libraries */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesCore"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroid"

    /** Material Design */
    implementation "com.google.android.material:material:$material"

    implementation "androidx.constraintlayout:constraintlayout:$constraint"
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'

    /** Architecture Components */
    implementation "androidx.core:core-ktx:$ktx"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtx"
    implementation "androidx.work:work-runtime-ktx:$workerKtx"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx"

    /** Fire-base Libraries */
    implementation "com.google.firebase:firebase-core:$firebase"
    implementation "com.google.firebase:firebase-analytics:$firebase"

    /** Crash Analytics */
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics")

    /** Glide Libraries */
    implementation "com.github.bumptech.glide:glide:$glide"
    implementation 'androidx.preference:preference:1.1.1'
    kapt "com.github.bumptech.glide:compiler:$glide"

    /** Material Dialogs */
    implementation "com.afollestad.material-dialogs:core:$materialDialogs"

    /** Retrofit Libraries */
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation("com.squareup.retrofit2:converter-simplexml:$retrofit") {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpLogger"

    /** Butter Knife Libraries */
    implementation "com.jakewharton:butterknife:$butterKnife"
    kapt "com.jakewharton:butterknife-compiler:$butterKnife"

    /** Rich Text Markdown Parser */
    implementation "io.noties.markwon:core:$markwon"
    implementation "io.noties.markwon:ext-strikethrough:$markwon"
    implementation "io.noties.markwon:ext-tables:$markwon"
    implementation "io.noties.markwon:ext-tasklist:$markwon"
    implementation "io.noties.markwon:editor:$markwon"
    implementation "io.noties.markwon:html:$markwon"
    implementation "io.noties.markwon:image:$markwon"
    implementation "io.noties.markwon:image-glide:$markwon"
    implementation "io.noties.markwon:linkify:$markwon"
    implementation "io.noties.markwon:simple-ext:$markwon"
    implementation "io.noties.markwon:syntax-highlight:$markwon"
    implementation 'me.saket:better-link-movement-method:2.2.0'

    /** Object Box */
    implementation "io.objectbox:objectbox-android:$objectBox"
    kapt "io.objectbox:objectbox-processor:$objectBox"

    /** Flex Box */
    implementation "com.google.android:flexbox:$flexBox"

    /** Smart Tab Layout */
    implementation "com.ogaclejapan.smarttablayout:library:$smartTab"

    /** Tap Target Prompt */
    implementation "uk.co.samuelwall:material-tap-target-prompt:$tapTarget"

    /** Emojify */
    implementation "com.github.wax911:android-emojify:$emojify"

    /** GraphQL */
    implementation "com.github.anitrend:retrofit-graphql:$graphql"

    /** Timber */
    implementation "com.jakewharton.timber:timber:$timber"

    /** Pretty Time */
    implementation "org.ocpsoft.prettytime:prettytime:$prettyTime"

    /** Highly Customizable Video Player */
    implementation "cn.jzvd:jiaozivideoplayer:$jiaoziVideoPlayer"

    /** Photo View */
    implementation "com.github.chrisbanes:PhotoView:$photoView"

    /** On-boarding Experience */
    implementation "com.codemybrainsout.onboarding:onboarder:$onboarder"

    /** Charts */
    implementation "com.github.PhilJay:MPAndroidChart:v$mpAndroidChart"

    /** About Library */
    implementation "com.github.medyo:android-about-page:$aboutPage"

    /** Multi Dex */
    implementation "androidx.multidex:multidex:$multidex"

    /** Material Search View */
    implementation "com.github.ma-myair:MaterialSearchView:$materialSearchView"

    /** State Layout Library */
    implementation "com.github.nguyenhoanglam:ProgressLayout:$progressLayout"

    /** Event Bus Library */
    implementation "org.greenrobot:eventbus:$eventBus"

    /** Alerter */
    implementation "com.tapadoo.android:alerter:$alerter"

    /** Stream */
    implementation "com.annimon:stream:$stream"

    /** Circular Progress View */
    implementation "com.github.rahatarmanahmed:circularprogressview:$circularProgressView"

    /** Testing-only dependencies */
    testImplementation "junit:junit:$junit"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "org.hamcrest:hamcrest-library:$hemcrest"

    androidTestImplementation "androidx.test:runner:$runner"
    androidTestImplementation "org.mockito:mockito-android:$mockito"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
}

if (flavor == 'app' && file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'io.fabric'
}
